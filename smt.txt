#!/bin/bash
# backup.sh

set -euo pipefail

SRC_DIR="/home/user/source"
BACKUP_ROOT="/home/user"
REPORT_FILE="/home/user/backup-report"
TODAY=$(date +%F)

mkdir -p "$SRC_DIR"

# Проверка прав доступа
if [ ! -r "$SRC_DIR" ]; then
    echo "Error: Source directory '$SRC_DIR' is not readable." >&2
    exit 1
fi

if [ ! -w "$BACKUP_ROOT" ]; then
    echo "Error: Cannot write to '$BACKUP_ROOT'. Check permissions." >&2
    exit 1
fi

if [ ! -e "$REPORT_FILE" ]; then
    touch "$REPORT_FILE" || {
        echo "Error: Cannot create report file '$REPORT_FILE'." >&2
        exit 1
    }
fi

# Найти самый свежий backup каталог
latest_backup=$(find "$BACKUP_ROOT" -maxdepth 1 -type d -name 'Backup-*' 2>/dev/null | sort -r | head -n 1)

if [ -n "$latest_backup" ]; then
    backup_date=$(basename "$latest_backup" | cut -d- -f2-)
    if ! date -d "$backup_date" &>/dev/null; then
        echo "Warning: Skipping invalid backup folder: $latest_backup" >&2
        backup_date="1970-01-01"
        seconds_diff=$((8 * 86400))
    else
        seconds_diff=$(( $(date +%s) - $(date -d "$backup_date" +%s) ))
    fi
else
    seconds_diff=$((8 * 86400))
    backup_date="1970-01-01"
fi

if [ "$seconds_diff" -ge $((7 * 86400)) ]; then
    # Создание нового бэкапа
    new_backup="$BACKUP_ROOT/Backup-$TODAY"
    if ! mkdir "$new_backup"; then
        echo "Error: Could not create backup directory '$new_backup'." >&2
        exit 1
    fi
    echo "[$TODAY] new backup folder created: Backup-$TODAY" >> "$REPORT_FILE"

    for file in "$SRC_DIR"/*; do
        [ -f "$file" ] || continue
        if ! cp -- "$file" "$new_backup/"; then
            echo "Warning: Failed to copy file: $file" >&2
            continue
        fi
        echo "$(basename "$file")" >> "$REPORT_FILE"
    done
else
    # Обновление существующего бэкапа
    echo "[$TODAY] updating backup folder: Backup-$backup_date" >> "$REPORT_FILE"
    new_backup="$BACKUP_ROOT/Backup-$backup_date"
    new_files=""
    updated_files=""

    for file in "$SRC_DIR"/*; do
        [ -f "$file" ] || continue
        base="$(basename "$file")"
        target="$new_backup/$base"

        if [ ! -f "$target" ]; then
            if cp -- "$file" "$target"; then
                new_files+="$base\n"
            else
                echo "Warning: Failed to copy new file: $file" >&2
            fi
        else
            orig_size=$(stat -c %s "$target" 2>/dev/null || echo 0)
            new_size=$(stat -c %s "$file" 2>/dev/null || echo 0)
            if [ "$orig_size" -ne "$new_size" ]; then
                if mv "$target" "$target.$TODAY" && cp "$file" "$target"; then
                    updated_files+="$base $base.$TODAY\n"
                else
                    echo "Warning: Failed to version and replace file: $file" >&2
                fi
            fi
        fi
    done

    echo -e "$new_files$updated_files" >> "$REPORT_FILE"
fi
