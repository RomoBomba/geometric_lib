import os
import sys
import subprocess
from fusepy import FUSE, Operations

class ConverterFS(Operations):
    def __init__(self, root):
        self.root = root

    def get_path(self, path):
        return os.path.join(self.root, path.lstrip('/'))

    def readdir(self, path, fh):
        entries = ['.', '..']
        real_path = self.get_path(path)
        
        for entry in os.listdir(real_path):
            entries.append(entry)
            if entry.endswith('.png'):
                entries.append(entry.replace('.png', '.jpg'))  # Виртуальный JPG
        return entries

    def getattr(self, path, fh=None):
        real_path = self.get_path(path)
        
        # Для виртуальных JPG-файлов
        if path.endswith('.jpg'):
            png_path = real_path.replace('.jpg', '.png')
            if not os.path.exists(png_path):
                raise FileNotFoundError()
            st = os.stat(png_path)
            return dict((key, getattr(st, key)) for key in ('st_mode', 'st_size', 'st_atime', 'st_mtime'))
        
        st = os.stat(real_path)
        return dict((key, getattr(st, key)) for key in ('st_mode', 'st_size', 'st_atime', 'st_mtime'))

    def open(self, path, flags):
        real_path = self.get_path(path)
        
        # Конвертация PNG в JPG при открытии
        if path.endswith('.jpg'):
            png_path = real_path.replace('.jpg', '.png')
            if not os.path.exists(png_path):
                raise FileNotFoundError()
            subprocess.run(['convert', png_path, real_path], check=True)
        
        return os.open(real_path, flags)

    def read(self, path, size, offset, fh):
        os.lseek(fh, offset, os.SEEK_SET)
        return os.read(fh, size)

if __name__ == '__main__':
    if len(sys.argv) != 3:
        print(f"Usage: {sys.argv[0]} <source_dir> <mount_dir>")
        sys.exit(1)
    
    fuse = FUSE(ConverterFS(sys.argv[1]), sys.argv[2], foreground=True)
